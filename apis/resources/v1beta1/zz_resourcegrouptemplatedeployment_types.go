/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ResourceGroupTemplateDeploymentObservation struct {

	// The ID of the Resource Group Template Deployment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The JSON Content of the Outputs of the ARM Template Deployment.
	OutputContent *string `json:"outputContent,omitempty" tf:"output_content,omitempty"`
}

type ResourceGroupTemplateDeploymentParameters struct {

	// The Debug Level which should be used for this Resource Group Template Deployment. Possible values are none, requestContent, responseContent and requestContent, responseContent.
	// +kubebuilder:validation:Optional
	DebugLevel *string `json:"debugLevel,omitempty" tf:"debug_level,omitempty"`

	// The Deployment Mode for this Resource Group Template Deployment. Possible values are Complete (where resources in the Resource Group not specified in the ARM Template will be destroyed) and Incremental (where resources are additive only).
	// +kubebuilder:validation:Required
	DeploymentMode *string `json:"deploymentMode" tf:"deployment_mode,omitempty"`

	// The contents of the ARM Template parameters file - containing a JSON list of parameters.
	// +kubebuilder:validation:Optional
	ParametersContent *string `json:"parametersContent,omitempty" tf:"parameters_content,omitempty"`

	// The name of the Resource Group where the Resource Group Template Deployment should exist. Changing this forces a new Resource Group Template Deployment to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A mapping of tags which should be assigned to the Resource Group Template Deployment.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The contents of the ARM Template which should be deployed into this Resource Group. Cannot be specified with template_spec_version_id.
	// +kubebuilder:validation:Optional
	TemplateContent *string `json:"templateContent,omitempty" tf:"template_content,omitempty"`

	// The ID of the Template Spec Version to deploy. Cannot be specified with template_content.
	// +kubebuilder:validation:Optional
	TemplateSpecVersionID *string `json:"templateSpecVersionId,omitempty" tf:"template_spec_version_id,omitempty"`
}

// ResourceGroupTemplateDeploymentSpec defines the desired state of ResourceGroupTemplateDeployment
type ResourceGroupTemplateDeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ResourceGroupTemplateDeploymentParameters `json:"forProvider"`
}

// ResourceGroupTemplateDeploymentStatus defines the observed state of ResourceGroupTemplateDeployment.
type ResourceGroupTemplateDeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ResourceGroupTemplateDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceGroupTemplateDeployment is the Schema for the ResourceGroupTemplateDeployments API. Manages a Resource Group Template Deployment.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ResourceGroupTemplateDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResourceGroupTemplateDeploymentSpec   `json:"spec"`
	Status            ResourceGroupTemplateDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResourceGroupTemplateDeploymentList contains a list of ResourceGroupTemplateDeployments
type ResourceGroupTemplateDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResourceGroupTemplateDeployment `json:"items"`
}

// Repository type metadata.
var (
	ResourceGroupTemplateDeployment_Kind             = "ResourceGroupTemplateDeployment"
	ResourceGroupTemplateDeployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResourceGroupTemplateDeployment_Kind}.String()
	ResourceGroupTemplateDeployment_KindAPIVersion   = ResourceGroupTemplateDeployment_Kind + "." + CRDGroupVersion.String()
	ResourceGroupTemplateDeployment_GroupVersionKind = CRDGroupVersion.WithKind(ResourceGroupTemplateDeployment_Kind)
)

func init() {
	SchemeBuilder.Register(&ResourceGroupTemplateDeployment{}, &ResourceGroupTemplateDeploymentList{})
}
