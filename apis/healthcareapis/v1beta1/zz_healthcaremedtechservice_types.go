/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HealthcareMedtechServiceIdentityObservation struct {

	// The Principal ID associated with this System Assigned Managed Service Identity.
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// The Tenant ID associated with this System Assigned Managed Service Identity.
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type HealthcareMedtechServiceIdentityParameters struct {

	// Specifies the type of Managed Service Identity that should be configured on this Healthcare Med Tech Service. Possible values are SystemAssigned.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type HealthcareMedtechServiceObservation struct {

	// The ID of the Healthcare Med Tech Service.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	Identity []HealthcareMedtechServiceIdentityObservation `json:"identity,omitempty" tf:"identity,omitempty"`
}

type HealthcareMedtechServiceParameters struct {

	// Specifies the Device Mappings of the Med Tech Service.
	// +kubebuilder:validation:Required
	DeviceMappingJSON *string `json:"deviceMappingJson" tf:"device_mapping_json,omitempty"`

	// Specifies the Consumer Group of the Event Hub to connect to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.ConsumerGroup
	// +kubebuilder:validation:Optional
	EventHubConsumerGroupName *string `json:"eventhubConsumerGroupName,omitempty" tf:"eventhub_consumer_group_name,omitempty"`

	// Reference to a ConsumerGroup in eventhub to populate eventhubConsumerGroupName.
	// +kubebuilder:validation:Optional
	EventHubConsumerGroupNameRef *v1.Reference `json:"eventhubConsumerGroupNameRef,omitempty" tf:"-"`

	// Selector for a ConsumerGroup in eventhub to populate eventhubConsumerGroupName.
	// +kubebuilder:validation:Optional
	EventHubConsumerGroupNameSelector *v1.Selector `json:"eventhubConsumerGroupNameSelector,omitempty" tf:"-"`

	// Specifies the name of the Event Hub to connect to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHub
	// +kubebuilder:validation:Optional
	EventHubName *string `json:"eventhubName,omitempty" tf:"eventhub_name,omitempty"`

	// Reference to a EventHub in eventhub to populate eventhubName.
	// +kubebuilder:validation:Optional
	EventHubNameRef *v1.Reference `json:"eventhubNameRef,omitempty" tf:"-"`

	// Selector for a EventHub in eventhub to populate eventhubName.
	// +kubebuilder:validation:Optional
	EventHubNameSelector *v1.Selector `json:"eventhubNameSelector,omitempty" tf:"-"`

	// Specifies the namespace name of the Event Hub to connect to.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/eventhub/v1beta1.EventHubNamespace
	// +kubebuilder:validation:Optional
	EventHubNamespaceName *string `json:"eventhubNamespaceName,omitempty" tf:"eventhub_namespace_name,omitempty"`

	// Reference to a EventHubNamespace in eventhub to populate eventhubNamespaceName.
	// +kubebuilder:validation:Optional
	EventHubNamespaceNameRef *v1.Reference `json:"eventhubNamespaceNameRef,omitempty" tf:"-"`

	// Selector for a EventHubNamespace in eventhub to populate eventhubNamespaceName.
	// +kubebuilder:validation:Optional
	EventHubNamespaceNameSelector *v1.Selector `json:"eventhubNamespaceNameSelector,omitempty" tf:"-"`

	// An identity block as defined below.
	// +kubebuilder:validation:Optional
	Identity []HealthcareMedtechServiceIdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// Specifies the Azure Region where the Healthcare Med Tech Service should be created. Changing this forces a new Healthcare Med Tech Service to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// A mapping of tags to assign to the Healthcare Med Tech Service.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies the id of the Healthcare Workspace where the Healthcare Med Tech Service should exist. Changing this forces a new Healthcare Med Tech Service to be created.
	// +crossplane:generate:reference:type=HealthcareWorkspace
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`

	// Reference to a HealthcareWorkspace to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDRef *v1.Reference `json:"workspaceIdRef,omitempty" tf:"-"`

	// Selector for a HealthcareWorkspace to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDSelector *v1.Selector `json:"workspaceIdSelector,omitempty" tf:"-"`
}

// HealthcareMedtechServiceSpec defines the desired state of HealthcareMedtechService
type HealthcareMedtechServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HealthcareMedtechServiceParameters `json:"forProvider"`
}

// HealthcareMedtechServiceStatus defines the observed state of HealthcareMedtechService.
type HealthcareMedtechServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HealthcareMedtechServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HealthcareMedtechService is the Schema for the HealthcareMedtechServices API. Manages a Healthcare MedTech (Internet of Medical Things) devices Service.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type HealthcareMedtechService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HealthcareMedtechServiceSpec   `json:"spec"`
	Status            HealthcareMedtechServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HealthcareMedtechServiceList contains a list of HealthcareMedtechServices
type HealthcareMedtechServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HealthcareMedtechService `json:"items"`
}

// Repository type metadata.
var (
	HealthcareMedtechService_Kind             = "HealthcareMedtechService"
	HealthcareMedtechService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HealthcareMedtechService_Kind}.String()
	HealthcareMedtechService_KindAPIVersion   = HealthcareMedtechService_Kind + "." + CRDGroupVersion.String()
	HealthcareMedtechService_GroupVersionKind = CRDGroupVersion.WithKind(HealthcareMedtechService_Kind)
)

func init() {
	SchemeBuilder.Register(&HealthcareMedtechService{}, &HealthcareMedtechServiceList{})
}
