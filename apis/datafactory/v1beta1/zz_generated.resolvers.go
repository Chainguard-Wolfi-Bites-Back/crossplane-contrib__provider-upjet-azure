/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta11 "github.com/upbound/provider-azure/apis/network/v1beta1"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this CustomDataSet.
func (mg *CustomDataSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataFlow.
func (mg *DataFlow) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Sink); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Sink[i3].DataSet); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameRef,
				Selector:     mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameSelector,
				To: reference.To{
					List:    &DataSetJSONList{},
					Managed: &DataSetJSON{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name")
			}
			mg.Spec.ForProvider.Sink[i3].DataSet[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Sink[i3].DataSet[i4].NameRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Source); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Source[i3].DataSet); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Source[i3].DataSet[i4].Name),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Source[i3].DataSet[i4].NameRef,
				Selector:     mg.Spec.ForProvider.Source[i3].DataSet[i4].NameSelector,
				To: reference.To{
					List:    &DataSetJSONList{},
					Managed: &DataSetJSON{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Source[i3].DataSet[i4].Name")
			}
			mg.Spec.ForProvider.Source[i3].DataSet[i4].Name = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Source[i3].DataSet[i4].NameRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this DataSetAzureBlob.
func (mg *DataSetAzureBlob) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetBinary.
func (mg *DataSetBinary) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetCosmosDBSQLAPI.
func (mg *DataSetCosmosDBSQLAPI) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetDelimitedText.
func (mg *DataSetDelimitedText) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetHTTP.
func (mg *DataSetHTTP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetJSON.
func (mg *DataSetJSON) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetMySQL.
func (mg *DataSetMySQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetParquet.
func (mg *DataSetParquet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetPostgreSQL.
func (mg *DataSetPostgreSQL) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DataSetSnowflake.
func (mg *DataSetSnowflake) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Factory.
func (mg *Factory) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupList{},
			Managed: &v1beta1.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeAzure.
func (mg *IntegrationRuntimeAzure) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IntegrationRuntimeAzureSSIS.
func (mg *IntegrationRuntimeAzureSSIS) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ExpressVnetIntegration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDRef,
			Selector:     mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDSelector,
			To: reference.To{
				List:    &v1beta11.SubnetList{},
				Managed: &v1beta11.Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID")
		}
		mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ExpressVnetIntegration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VnetIntegration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VnetIntegration[i3].SubnetID),
			Extract:      rconfig.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDRef,
			Selector:     mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDSelector,
			To: reference.To{
				List:    &v1beta11.SubnetList{},
				Managed: &v1beta11.Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration[i3].SubnetID")
		}
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.VnetIntegration); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VnetIntegration[i3].SubnetName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameRef,
			Selector:     mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameSelector,
			To: reference.To{
				List:    &v1beta11.SubnetList{},
				Managed: &v1beta11.Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.VnetIntegration[i3].SubnetName")
		}
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.VnetIntegration[i3].SubnetNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this LinkedServiceOdbc.
func (mg *LinkedServiceOdbc) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DataFactoryID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.DataFactoryIDRef,
		Selector:     mg.Spec.ForProvider.DataFactoryIDSelector,
		To: reference.To{
			List:    &FactoryList{},
			Managed: &Factory{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DataFactoryID")
	}
	mg.Spec.ForProvider.DataFactoryID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DataFactoryIDRef = rsp.ResolvedReference

	return nil
}
