/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta1 "github.com/upbound/provider-azure/apis/insights/v1beta1"
	rconfig "github.com/upbound/provider-azure/apis/rconfig"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this MonitorActionRuleActionGroup.
func (mg *MonitorActionRuleActionGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ActionGroupID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ActionGroupIDRef,
		Selector:     mg.Spec.ForProvider.ActionGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.MonitorActionGroupList{},
			Managed: &v1beta1.MonitorActionGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ActionGroupID")
	}
	mg.Spec.ForProvider.ActionGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ActionGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ActionGroupID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ActionGroupIDRef,
		Selector:     mg.Spec.InitProvider.ActionGroupIDSelector,
		To: reference.To{
			List:    &v1beta1.MonitorActionGroupList{},
			Managed: &v1beta1.MonitorActionGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ActionGroupID")
	}
	mg.Spec.InitProvider.ActionGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ActionGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorActionRuleSuppression.
func (mg *MonitorActionRuleSuppression) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this MonitorAlertProcessingRuleActionGroup.
func (mg *MonitorAlertProcessingRuleActionGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.AddActionGroupIds),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.ForProvider.AddActionGroupIdsRefs,
		Selector:      mg.Spec.ForProvider.AddActionGroupIdsSelector,
		To: reference.To{
			List:    &v1beta1.MonitorActionGroupList{},
			Managed: &v1beta1.MonitorActionGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AddActionGroupIds")
	}
	mg.Spec.ForProvider.AddActionGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.AddActionGroupIdsRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Scopes),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.ForProvider.ScopesRefs,
		Selector:      mg.Spec.ForProvider.ScopesSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Scopes")
	}
	mg.Spec.ForProvider.Scopes = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ScopesRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.AddActionGroupIds),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.InitProvider.AddActionGroupIdsRefs,
		Selector:      mg.Spec.InitProvider.AddActionGroupIdsSelector,
		To: reference.To{
			List:    &v1beta1.MonitorActionGroupList{},
			Managed: &v1beta1.MonitorActionGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AddActionGroupIds")
	}
	mg.Spec.InitProvider.AddActionGroupIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.AddActionGroupIdsRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Scopes),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.InitProvider.ScopesRefs,
		Selector:      mg.Spec.InitProvider.ScopesSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Scopes")
	}
	mg.Spec.InitProvider.Scopes = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ScopesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this MonitorAlertProcessingRuleSuppression.
func (mg *MonitorAlertProcessingRuleSuppression) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.Scopes),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.ForProvider.ScopesRefs,
		Selector:      mg.Spec.ForProvider.ScopesSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.Scopes")
	}
	mg.Spec.ForProvider.Scopes = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ScopesRefs = mrsp.ResolvedReferences

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.Scopes),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.InitProvider.ScopesRefs,
		Selector:      mg.Spec.InitProvider.ScopesSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.Scopes")
	}
	mg.Spec.InitProvider.Scopes = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ScopesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this MonitorSmartDetectorAlertRule.
func (mg *MonitorSmartDetectorAlertRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ActionGroup); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ActionGroup[i3].Ids),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.ForProvider.ActionGroup[i3].IdsRefs,
			Selector:      mg.Spec.ForProvider.ActionGroup[i3].IdsSelector,
			To: reference.To{
				List:    &v1beta1.MonitorActionGroupList{},
				Managed: &v1beta1.MonitorActionGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ActionGroup[i3].Ids")
		}
		mg.Spec.ForProvider.ActionGroup[i3].Ids = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.ActionGroup[i3].IdsRefs = mrsp.ResolvedReferences

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.ScopeResourceIds),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.ForProvider.ScopeResourceIdsRefs,
		Selector:      mg.Spec.ForProvider.ScopeResourceIdsSelector,
		To: reference.To{
			List:    &v1beta1.ApplicationInsightsList{},
			Managed: &v1beta1.ApplicationInsights{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ScopeResourceIds")
	}
	mg.Spec.ForProvider.ScopeResourceIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.ScopeResourceIdsRefs = mrsp.ResolvedReferences

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ActionGroup); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ActionGroup[i3].Ids),
			Extract:       rconfig.ExtractResourceID(),
			References:    mg.Spec.InitProvider.ActionGroup[i3].IdsRefs,
			Selector:      mg.Spec.InitProvider.ActionGroup[i3].IdsSelector,
			To: reference.To{
				List:    &v1beta1.MonitorActionGroupList{},
				Managed: &v1beta1.MonitorActionGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.ActionGroup[i3].Ids")
		}
		mg.Spec.InitProvider.ActionGroup[i3].Ids = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.ActionGroup[i3].IdsRefs = mrsp.ResolvedReferences

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.InitProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta11.ResourceGroupList{},
			Managed: &v1beta11.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceGroupName")
	}
	mg.Spec.InitProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceGroupNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.ScopeResourceIds),
		Extract:       rconfig.ExtractResourceID(),
		References:    mg.Spec.InitProvider.ScopeResourceIdsRefs,
		Selector:      mg.Spec.InitProvider.ScopeResourceIdsSelector,
		To: reference.To{
			List:    &v1beta1.ApplicationInsightsList{},
			Managed: &v1beta1.ApplicationInsights{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ScopeResourceIds")
	}
	mg.Spec.InitProvider.ScopeResourceIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.ScopeResourceIdsRefs = mrsp.ResolvedReferences

	return nil
}
