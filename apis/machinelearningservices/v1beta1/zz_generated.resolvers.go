/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta13 "github.com/upbound/provider-azure/apis/azure/v1beta1"
	v1beta1 "github.com/upbound/provider-azure/apis/insights/v1beta1"
	v1beta11 "github.com/upbound/provider-azure/apis/keyvault/v1beta1"
	v1beta12 "github.com/upbound/provider-azure/apis/managedidentity/v1beta1"
	v1beta14 "github.com/upbound/provider-azure/apis/storage/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Workspace.
func (mg *Workspace) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationInsightsID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ApplicationInsightsIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationInsightsIDSelector,
		To: reference.To{
			List:    &v1beta1.ApplicationInsightsList{},
			Managed: &v1beta1.ApplicationInsights{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationInsightsID")
	}
	mg.Spec.ForProvider.ApplicationInsightsID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationInsightsIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Encryption); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Encryption[i3].KeyID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Encryption[i3].KeyIDRef,
			Selector:     mg.Spec.ForProvider.Encryption[i3].KeyIDSelector,
			To: reference.To{
				List:    &v1beta11.KeyList{},
				Managed: &v1beta11.Key{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Encryption[i3].KeyID")
		}
		mg.Spec.ForProvider.Encryption[i3].KeyID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Encryption[i3].KeyIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Encryption); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Encryption[i3].KeyVaultID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Encryption[i3].KeyVaultIDRef,
			Selector:     mg.Spec.ForProvider.Encryption[i3].KeyVaultIDSelector,
			To: reference.To{
				List:    &v1beta11.VaultList{},
				Managed: &v1beta11.Vault{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Encryption[i3].KeyVaultID")
		}
		mg.Spec.ForProvider.Encryption[i3].KeyVaultID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Encryption[i3].KeyVaultIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Encryption); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Encryption[i3].UserAssignedIdentityID),
			Extract:      resource.ExtractResourceID(),
			Reference:    mg.Spec.ForProvider.Encryption[i3].UserAssignedIdentityIDRef,
			Selector:     mg.Spec.ForProvider.Encryption[i3].UserAssignedIdentityIDSelector,
			To: reference.To{
				List:    &v1beta12.UserAssignedIdentityList{},
				Managed: &v1beta12.UserAssignedIdentity{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.Encryption[i3].UserAssignedIdentityID")
		}
		mg.Spec.ForProvider.Encryption[i3].UserAssignedIdentityID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.Encryption[i3].UserAssignedIdentityIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.KeyVaultID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.KeyVaultIDRef,
		Selector:     mg.Spec.ForProvider.KeyVaultIDSelector,
		To: reference.To{
			List:    &v1beta11.VaultList{},
			Managed: &v1beta11.Vault{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.KeyVaultID")
	}
	mg.Spec.ForProvider.KeyVaultID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.KeyVaultIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrimaryUserAssignedIdentity),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PrimaryUserAssignedIdentityRef,
		Selector:     mg.Spec.ForProvider.PrimaryUserAssignedIdentitySelector,
		To: reference.To{
			List:    &v1beta12.UserAssignedIdentityList{},
			Managed: &v1beta12.UserAssignedIdentity{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrimaryUserAssignedIdentity")
	}
	mg.Spec.ForProvider.PrimaryUserAssignedIdentity = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrimaryUserAssignedIdentityRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ResourceGroupNameRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupNameSelector,
		To: reference.To{
			List:    &v1beta13.ResourceGroupList{},
			Managed: &v1beta13.ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupName")
	}
	mg.Spec.ForProvider.ResourceGroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.StorageAccountID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.StorageAccountIDRef,
		Selector:     mg.Spec.ForProvider.StorageAccountIDSelector,
		To: reference.To{
			List:    &v1beta14.AccountList{},
			Managed: &v1beta14.Account{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.StorageAccountID")
	}
	mg.Spec.ForProvider.StorageAccountID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.StorageAccountIDRef = rsp.ResolvedReference

	return nil
}
