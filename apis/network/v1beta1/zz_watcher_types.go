/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WatcherObservation struct {

	// The ID of the Network Watcher.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WatcherParameters struct {

	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// The name of the resource group in which to create the Network Watcher. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// WatcherSpec defines the desired state of Watcher
type WatcherSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WatcherParameters `json:"forProvider"`
}

// WatcherStatus defines the observed state of Watcher.
type WatcherStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WatcherObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Watcher is the Schema for the Watchers API. Manages a Network Watcher.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type Watcher struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WatcherSpec   `json:"spec"`
	Status            WatcherStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WatcherList contains a list of Watchers
type WatcherList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Watcher `json:"items"`
}

// Repository type metadata.
var (
	Watcher_Kind             = "Watcher"
	Watcher_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Watcher_Kind}.String()
	Watcher_KindAPIVersion   = Watcher_Kind + "." + CRDGroupVersion.String()
	Watcher_GroupVersionKind = CRDGroupVersion.WithKind(Watcher_Kind)
)

func init() {
	SchemeBuilder.Register(&Watcher{}, &WatcherList{})
}
