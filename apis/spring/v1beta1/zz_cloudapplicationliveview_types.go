/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudApplicationLiveViewObservation struct {

	// The ID of the Spring Cloud Application Live View.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	SpringCloudServiceID *string `json:"springCloudServiceId,omitempty" tf:"spring_cloud_service_id,omitempty"`
}

type CloudApplicationLiveViewParameters struct {

	// The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud Application Live View to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/appplatform/v1beta1.SpringCloudService
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SpringCloudServiceID *string `json:"springCloudServiceId,omitempty" tf:"spring_cloud_service_id,omitempty"`

	// Reference to a SpringCloudService in appplatform to populate springCloudServiceId.
	// +kubebuilder:validation:Optional
	SpringCloudServiceIDRef *v1.Reference `json:"springCloudServiceIdRef,omitempty" tf:"-"`

	// Selector for a SpringCloudService in appplatform to populate springCloudServiceId.
	// +kubebuilder:validation:Optional
	SpringCloudServiceIDSelector *v1.Selector `json:"springCloudServiceIdSelector,omitempty" tf:"-"`
}

// CloudApplicationLiveViewSpec defines the desired state of CloudApplicationLiveView
type CloudApplicationLiveViewSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudApplicationLiveViewParameters `json:"forProvider"`
}

// CloudApplicationLiveViewStatus defines the observed state of CloudApplicationLiveView.
type CloudApplicationLiveViewStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudApplicationLiveViewObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudApplicationLiveView is the Schema for the CloudApplicationLiveViews API. Manages a Spring Cloud Application Live View.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CloudApplicationLiveView struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudApplicationLiveViewSpec   `json:"spec"`
	Status            CloudApplicationLiveViewStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudApplicationLiveViewList contains a list of CloudApplicationLiveViews
type CloudApplicationLiveViewList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudApplicationLiveView `json:"items"`
}

// Repository type metadata.
var (
	CloudApplicationLiveView_Kind             = "CloudApplicationLiveView"
	CloudApplicationLiveView_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudApplicationLiveView_Kind}.String()
	CloudApplicationLiveView_KindAPIVersion   = CloudApplicationLiveView_Kind + "." + CRDGroupVersion.String()
	CloudApplicationLiveView_GroupVersionKind = CRDGroupVersion.WithKind(CloudApplicationLiveView_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudApplicationLiveView{}, &CloudApplicationLiveViewList{})
}
