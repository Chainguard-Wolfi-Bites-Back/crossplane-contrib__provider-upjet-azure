// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-azure/apis/authorization/v1beta1"
	v1beta11 "github.com/upbound/provider-azure/apis/network/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this ResourcePolicyRemediation.
func (mg *ResourcePolicyRemediation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyAssignmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PolicyAssignmentIDRef,
		Selector:     mg.Spec.ForProvider.PolicyAssignmentIDSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupPolicyAssignmentList{},
			Managed: &v1beta1.ResourceGroupPolicyAssignment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyAssignmentID")
	}
	mg.Spec.ForProvider.PolicyAssignmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyAssignmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.ResourceIDRef,
		Selector:     mg.Spec.ForProvider.ResourceIDSelector,
		To: reference.To{
			List:    &v1beta11.VirtualNetworkList{},
			Managed: &v1beta11.VirtualNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceID")
	}
	mg.Spec.ForProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyAssignmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.PolicyAssignmentIDRef,
		Selector:     mg.Spec.InitProvider.PolicyAssignmentIDSelector,
		To: reference.To{
			List:    &v1beta1.ResourceGroupPolicyAssignmentList{},
			Managed: &v1beta1.ResourceGroupPolicyAssignment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyAssignmentID")
	}
	mg.Spec.InitProvider.PolicyAssignmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyAssignmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ResourceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.ResourceIDRef,
		Selector:     mg.Spec.InitProvider.ResourceIDSelector,
		To: reference.To{
			List:    &v1beta11.VirtualNetworkList{},
			Managed: &v1beta11.VirtualNetwork{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceID")
	}
	mg.Spec.InitProvider.ResourceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SubscriptionPolicyRemediation.
func (mg *SubscriptionPolicyRemediation) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyAssignmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.PolicyAssignmentIDRef,
		Selector:     mg.Spec.ForProvider.PolicyAssignmentIDSelector,
		To: reference.To{
			List:    &v1beta1.SubscriptionPolicyAssignmentList{},
			Managed: &v1beta1.SubscriptionPolicyAssignment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyAssignmentID")
	}
	mg.Spec.ForProvider.PolicyAssignmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyAssignmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyAssignmentID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.PolicyAssignmentIDRef,
		Selector:     mg.Spec.InitProvider.PolicyAssignmentIDSelector,
		To: reference.To{
			List:    &v1beta1.SubscriptionPolicyAssignmentList{},
			Managed: &v1beta1.SubscriptionPolicyAssignment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyAssignmentID")
	}
	mg.Spec.InitProvider.PolicyAssignmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyAssignmentIDRef = rsp.ResolvedReference

	return nil
}
