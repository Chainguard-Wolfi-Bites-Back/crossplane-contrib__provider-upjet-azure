/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementAPITagObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagementAPITagParameters struct {

	// +kubebuilder:validation:Required
	APIID *string `json:"apiId" tf:"api_id,omitempty"`
}

// ManagementAPITagSpec defines the desired state of ManagementAPITag
type ManagementAPITagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementAPITagParameters `json:"forProvider"`
}

// ManagementAPITagStatus defines the observed state of ManagementAPITag.
type ManagementAPITagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementAPITagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementAPITag is the Schema for the ManagementAPITags API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ManagementAPITag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementAPITagSpec   `json:"spec"`
	Status            ManagementAPITagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementAPITagList contains a list of ManagementAPITags
type ManagementAPITagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementAPITag `json:"items"`
}

// Repository type metadata.
var (
	ManagementAPITag_Kind             = "ManagementAPITag"
	ManagementAPITag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementAPITag_Kind}.String()
	ManagementAPITag_KindAPIVersion   = ManagementAPITag_Kind + "." + CRDGroupVersion.String()
	ManagementAPITag_GroupVersionKind = CRDGroupVersion.WithKind(ManagementAPITag_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementAPITag{}, &ManagementAPITagList{})
}
