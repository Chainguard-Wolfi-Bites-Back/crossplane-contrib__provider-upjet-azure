/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerDNSAliasObservation struct {
	DNSRecord *string `json:"dnsRecord,omitempty" tf:"dns_record,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServerDNSAliasParameters struct {

	// +kubebuilder:validation:Required
	MSSQLServerID *string `json:"mssqlServerId" tf:"mssql_server_id,omitempty"`
}

// ServerDNSAliasSpec defines the desired state of ServerDNSAlias
type ServerDNSAliasSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerDNSAliasParameters `json:"forProvider"`
}

// ServerDNSAliasStatus defines the observed state of ServerDNSAlias.
type ServerDNSAliasStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerDNSAliasObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerDNSAlias is the Schema for the ServerDNSAliass API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ServerDNSAlias struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerDNSAliasSpec   `json:"spec"`
	Status            ServerDNSAliasStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerDNSAliasList contains a list of ServerDNSAliass
type ServerDNSAliasList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerDNSAlias `json:"items"`
}

// Repository type metadata.
var (
	ServerDNSAlias_Kind             = "ServerDNSAlias"
	ServerDNSAlias_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerDNSAlias_Kind}.String()
	ServerDNSAlias_KindAPIVersion   = ServerDNSAlias_Kind + "." + CRDGroupVersion.String()
	ServerDNSAlias_GroupVersionKind = CRDGroupVersion.WithKind(ServerDNSAlias_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerDNSAlias{}, &ServerDNSAliasList{})
}
