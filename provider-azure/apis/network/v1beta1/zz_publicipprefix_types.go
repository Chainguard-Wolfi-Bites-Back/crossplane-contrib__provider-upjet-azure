/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicIPPrefixObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPPrefix *string `json:"ipPrefix,omitempty" tf:"ip_prefix,omitempty"`
}

type PublicIPPrefixParameters struct {

	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Sku *string `json:"sku,omitempty" tf:"sku,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

// PublicIPPrefixSpec defines the desired state of PublicIPPrefix
type PublicIPPrefixSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublicIPPrefixParameters `json:"forProvider"`
}

// PublicIPPrefixStatus defines the observed state of PublicIPPrefix.
type PublicIPPrefixStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublicIPPrefixObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PublicIPPrefix is the Schema for the PublicIPPrefixs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PublicIPPrefix struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicIPPrefixSpec   `json:"spec"`
	Status            PublicIPPrefixStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublicIPPrefixList contains a list of PublicIPPrefixs
type PublicIPPrefixList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicIPPrefix `json:"items"`
}

// Repository type metadata.
var (
	PublicIPPrefix_Kind             = "PublicIPPrefix"
	PublicIPPrefix_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PublicIPPrefix_Kind}.String()
	PublicIPPrefix_KindAPIVersion   = PublicIPPrefix_Kind + "." + CRDGroupVersion.String()
	PublicIPPrefix_GroupVersionKind = CRDGroupVersion.WithKind(PublicIPPrefix_Kind)
)

func init() {
	SchemeBuilder.Register(&PublicIPPrefix{}, &PublicIPPrefixList{})
}
