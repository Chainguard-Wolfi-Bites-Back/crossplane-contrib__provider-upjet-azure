/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoadBalancerRuleObservation struct {
	FrontendIPConfigurationID *string `json:"frontendIpConfigurationId,omitempty" tf:"frontend_ip_configuration_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LoadBalancerRuleParameters struct {

	// +kubebuilder:validation:Optional
	BackendAddressPoolIds []*string `json:"backendAddressPoolIds,omitempty" tf:"backend_address_pool_ids,omitempty"`

	// +kubebuilder:validation:Required
	BackendPort *float64 `json:"backendPort" tf:"backend_port,omitempty"`

	// +kubebuilder:validation:Optional
	DisableOutboundSnat *bool `json:"disableOutboundSnat,omitempty" tf:"disable_outbound_snat,omitempty"`

	// +kubebuilder:validation:Optional
	EnableFloatingIP *bool `json:"enableFloatingIp,omitempty" tf:"enable_floating_ip,omitempty"`

	// +kubebuilder:validation:Optional
	EnableTCPReset *bool `json:"enableTcpReset,omitempty" tf:"enable_tcp_reset,omitempty"`

	// +kubebuilder:validation:Required
	FrontendIPConfigurationName *string `json:"frontendIpConfigurationName" tf:"frontend_ip_configuration_name,omitempty"`

	// +kubebuilder:validation:Required
	FrontendPort *float64 `json:"frontendPort" tf:"frontend_port,omitempty"`

	// +kubebuilder:validation:Optional
	IdleTimeoutInMinutes *float64 `json:"idleTimeoutInMinutes,omitempty" tf:"idle_timeout_in_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	LoadDistribution *string `json:"loadDistribution,omitempty" tf:"load_distribution,omitempty"`

	// +crossplane:generate:reference:type=LoadBalancer
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	LoadbalancerID *string `json:"loadbalancerId,omitempty" tf:"loadbalancer_id,omitempty"`

	// +kubebuilder:validation:Optional
	LoadbalancerIDRef *v1.Reference `json:"loadbalancerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LoadbalancerIDSelector *v1.Selector `json:"loadbalancerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ProbeID *string `json:"probeId,omitempty" tf:"probe_id,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

// LoadBalancerRuleSpec defines the desired state of LoadBalancerRule
type LoadBalancerRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadBalancerRuleParameters `json:"forProvider"`
}

// LoadBalancerRuleStatus defines the observed state of LoadBalancerRule.
type LoadBalancerRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadBalancerRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerRule is the Schema for the LoadBalancerRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LoadBalancerRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoadBalancerRuleSpec   `json:"spec"`
	Status            LoadBalancerRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerRuleList contains a list of LoadBalancerRules
type LoadBalancerRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadBalancerRule `json:"items"`
}

// Repository type metadata.
var (
	LoadBalancerRule_Kind             = "LoadBalancerRule"
	LoadBalancerRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadBalancerRule_Kind}.String()
	LoadBalancerRule_KindAPIVersion   = LoadBalancerRule_Kind + "." + CRDGroupVersion.String()
	LoadBalancerRule_GroupVersionKind = CRDGroupVersion.WithKind(LoadBalancerRule_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadBalancerRule{}, &LoadBalancerRuleList{})
}
