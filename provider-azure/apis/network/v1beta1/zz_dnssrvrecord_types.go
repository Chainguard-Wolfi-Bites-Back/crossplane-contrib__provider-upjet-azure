/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSSRVRecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DNSSRVRecordParameters struct {

	// +kubebuilder:validation:Required
	Record []DNSSRVRecordRecordParameters `json:"record" tf:"record,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	TTL *float64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +crossplane:generate:reference:type=DNSZone
	// +kubebuilder:validation:Optional
	ZoneName *string `json:"zoneName,omitempty" tf:"zone_name,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneNameRef *v1.Reference `json:"zoneNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ZoneNameSelector *v1.Selector `json:"zoneNameSelector,omitempty" tf:"-"`
}

type DNSSRVRecordRecordObservation struct {
}

type DNSSRVRecordRecordParameters struct {

	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// +kubebuilder:validation:Required
	Weight *float64 `json:"weight" tf:"weight,omitempty"`
}

// DNSSRVRecordSpec defines the desired state of DNSSRVRecord
type DNSSRVRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSSRVRecordParameters `json:"forProvider"`
}

// DNSSRVRecordStatus defines the observed state of DNSSRVRecord.
type DNSSRVRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSSRVRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSRVRecord is the Schema for the DNSSRVRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DNSSRVRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DNSSRVRecordSpec   `json:"spec"`
	Status            DNSSRVRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSRVRecordList contains a list of DNSSRVRecords
type DNSSRVRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSSRVRecord `json:"items"`
}

// Repository type metadata.
var (
	DNSSRVRecord_Kind             = "DNSSRVRecord"
	DNSSRVRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSSRVRecord_Kind}.String()
	DNSSRVRecord_KindAPIVersion   = DNSSRVRecord_Kind + "." + CRDGroupVersion.String()
	DNSSRVRecord_GroupVersionKind = CRDGroupVersion.WithKind(DNSSRVRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSSRVRecord{}, &DNSSRVRecordList{})
}
