/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DesktopScalingPlanObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DesktopScalingPlanParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ExclusionTag *string `json:"exclusionTag,omitempty" tf:"exclusion_tag,omitempty"`

	// +kubebuilder:validation:Optional
	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	// +kubebuilder:validation:Optional
	HostPool []HostPoolParameters `json:"hostPool,omitempty" tf:"host_pool,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Schedule []ScheduleParameters `json:"schedule" tf:"schedule,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TimeZone *string `json:"timeZone" tf:"time_zone,omitempty"`
}

type HostPoolObservation struct {
}

type HostPoolParameters struct {

	// +kubebuilder:validation:Required
	HostpoolID *string `json:"hostpoolId" tf:"hostpool_id,omitempty"`

	// +kubebuilder:validation:Required
	ScalingPlanEnabled *bool `json:"scalingPlanEnabled" tf:"scaling_plan_enabled,omitempty"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {

	// +kubebuilder:validation:Required
	DaysOfWeek []*string `json:"daysOfWeek" tf:"days_of_week,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	OffPeakLoadBalancingAlgorithm *string `json:"offPeakLoadBalancingAlgorithm" tf:"off_peak_load_balancing_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	OffPeakStartTime *string `json:"offPeakStartTime" tf:"off_peak_start_time,omitempty"`

	// +kubebuilder:validation:Required
	PeakLoadBalancingAlgorithm *string `json:"peakLoadBalancingAlgorithm" tf:"peak_load_balancing_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	PeakStartTime *string `json:"peakStartTime" tf:"peak_start_time,omitempty"`

	// +kubebuilder:validation:Required
	RampDownCapacityThresholdPercent *float64 `json:"rampDownCapacityThresholdPercent" tf:"ramp_down_capacity_threshold_percent,omitempty"`

	// +kubebuilder:validation:Required
	RampDownForceLogoffUsers *bool `json:"rampDownForceLogoffUsers" tf:"ramp_down_force_logoff_users,omitempty"`

	// +kubebuilder:validation:Required
	RampDownLoadBalancingAlgorithm *string `json:"rampDownLoadBalancingAlgorithm" tf:"ramp_down_load_balancing_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	RampDownMinimumHostsPercent *float64 `json:"rampDownMinimumHostsPercent" tf:"ramp_down_minimum_hosts_percent,omitempty"`

	// +kubebuilder:validation:Required
	RampDownNotificationMessage *string `json:"rampDownNotificationMessage" tf:"ramp_down_notification_message,omitempty"`

	// +kubebuilder:validation:Required
	RampDownStartTime *string `json:"rampDownStartTime" tf:"ramp_down_start_time,omitempty"`

	// +kubebuilder:validation:Required
	RampDownStopHostsWhen *string `json:"rampDownStopHostsWhen" tf:"ramp_down_stop_hosts_when,omitempty"`

	// +kubebuilder:validation:Required
	RampDownWaitTimeMinutes *float64 `json:"rampDownWaitTimeMinutes" tf:"ramp_down_wait_time_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	RampUpCapacityThresholdPercent *float64 `json:"rampUpCapacityThresholdPercent,omitempty" tf:"ramp_up_capacity_threshold_percent,omitempty"`

	// +kubebuilder:validation:Required
	RampUpLoadBalancingAlgorithm *string `json:"rampUpLoadBalancingAlgorithm" tf:"ramp_up_load_balancing_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	RampUpMinimumHostsPercent *float64 `json:"rampUpMinimumHostsPercent,omitempty" tf:"ramp_up_minimum_hosts_percent,omitempty"`

	// +kubebuilder:validation:Required
	RampUpStartTime *string `json:"rampUpStartTime" tf:"ramp_up_start_time,omitempty"`
}

// DesktopScalingPlanSpec defines the desired state of DesktopScalingPlan
type DesktopScalingPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DesktopScalingPlanParameters `json:"forProvider"`
}

// DesktopScalingPlanStatus defines the observed state of DesktopScalingPlan.
type DesktopScalingPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DesktopScalingPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DesktopScalingPlan is the Schema for the DesktopScalingPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DesktopScalingPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DesktopScalingPlanSpec   `json:"spec"`
	Status            DesktopScalingPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DesktopScalingPlanList contains a list of DesktopScalingPlans
type DesktopScalingPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DesktopScalingPlan `json:"items"`
}

// Repository type metadata.
var (
	DesktopScalingPlan_Kind             = "DesktopScalingPlan"
	DesktopScalingPlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DesktopScalingPlan_Kind}.String()
	DesktopScalingPlan_KindAPIVersion   = DesktopScalingPlan_Kind + "." + CRDGroupVersion.String()
	DesktopScalingPlan_GroupVersionKind = CRDGroupVersion.WithKind(DesktopScalingPlan_Kind)
)

func init() {
	SchemeBuilder.Register(&DesktopScalingPlan{}, &DesktopScalingPlanList{})
}
