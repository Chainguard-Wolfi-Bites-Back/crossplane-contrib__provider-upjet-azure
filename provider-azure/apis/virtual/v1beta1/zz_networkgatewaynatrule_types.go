/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExternalMappingObservation struct {
}

type ExternalMappingParameters struct {

	// +kubebuilder:validation:Required
	AddressSpace *string `json:"addressSpace" tf:"address_space,omitempty"`

	// +kubebuilder:validation:Optional
	PortRange *string `json:"portRange,omitempty" tf:"port_range,omitempty"`
}

type InternalMappingObservation struct {
}

type InternalMappingParameters struct {

	// +kubebuilder:validation:Required
	AddressSpace *string `json:"addressSpace" tf:"address_space,omitempty"`

	// +kubebuilder:validation:Optional
	PortRange *string `json:"portRange,omitempty" tf:"port_range,omitempty"`
}

type NetworkGatewayNATRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkGatewayNATRuleParameters struct {

	// +kubebuilder:validation:Required
	ExternalMapping []ExternalMappingParameters `json:"externalMapping" tf:"external_mapping,omitempty"`

	// +kubebuilder:validation:Optional
	IPConfigurationID *string `json:"ipConfigurationId,omitempty" tf:"ip_configuration_id,omitempty"`

	// +kubebuilder:validation:Required
	InternalMapping []InternalMappingParameters `json:"internalMapping" tf:"internal_mapping,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	VirtualNetworkGatewayID *string `json:"virtualNetworkGatewayId" tf:"virtual_network_gateway_id,omitempty"`
}

// NetworkGatewayNATRuleSpec defines the desired state of NetworkGatewayNATRule
type NetworkGatewayNATRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkGatewayNATRuleParameters `json:"forProvider"`
}

// NetworkGatewayNATRuleStatus defines the observed state of NetworkGatewayNATRule.
type NetworkGatewayNATRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkGatewayNATRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkGatewayNATRule is the Schema for the NetworkGatewayNATRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type NetworkGatewayNATRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkGatewayNATRuleSpec   `json:"spec"`
	Status            NetworkGatewayNATRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkGatewayNATRuleList contains a list of NetworkGatewayNATRules
type NetworkGatewayNATRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkGatewayNATRule `json:"items"`
}

// Repository type metadata.
var (
	NetworkGatewayNATRule_Kind             = "NetworkGatewayNATRule"
	NetworkGatewayNATRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkGatewayNATRule_Kind}.String()
	NetworkGatewayNATRule_KindAPIVersion   = NetworkGatewayNATRule_Kind + "." + CRDGroupVersion.String()
	NetworkGatewayNATRule_GroupVersionKind = CRDGroupVersion.WithKind(NetworkGatewayNATRule_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkGatewayNATRule{}, &NetworkGatewayNATRuleList{})
}
