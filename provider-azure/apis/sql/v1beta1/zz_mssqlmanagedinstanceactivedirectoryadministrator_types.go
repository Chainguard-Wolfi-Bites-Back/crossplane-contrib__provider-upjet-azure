/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MSSQLManagedInstanceActiveDirectoryAdministratorObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MSSQLManagedInstanceActiveDirectoryAdministratorParameters struct {

	// +kubebuilder:validation:Optional
	AzureadAuthenticationOnly *bool `json:"azureadAuthenticationOnly,omitempty" tf:"azuread_authentication_only,omitempty"`

	// +kubebuilder:validation:Required
	LoginUsername *string `json:"loginUsername" tf:"login_username,omitempty"`

	// +crossplane:generate:reference:type=MSSQLManagedInstance
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ManagedInstanceID *string `json:"managedInstanceId,omitempty" tf:"managed_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedInstanceIDRef *v1.Reference `json:"managedInstanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ManagedInstanceIDSelector *v1.Selector `json:"managedInstanceIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ObjectID *string `json:"objectId" tf:"object_id,omitempty"`

	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

// MSSQLManagedInstanceActiveDirectoryAdministratorSpec defines the desired state of MSSQLManagedInstanceActiveDirectoryAdministrator
type MSSQLManagedInstanceActiveDirectoryAdministratorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MSSQLManagedInstanceActiveDirectoryAdministratorParameters `json:"forProvider"`
}

// MSSQLManagedInstanceActiveDirectoryAdministratorStatus defines the observed state of MSSQLManagedInstanceActiveDirectoryAdministrator.
type MSSQLManagedInstanceActiveDirectoryAdministratorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MSSQLManagedInstanceActiveDirectoryAdministratorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MSSQLManagedInstanceActiveDirectoryAdministrator is the Schema for the MSSQLManagedInstanceActiveDirectoryAdministrators API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MSSQLManagedInstanceActiveDirectoryAdministrator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MSSQLManagedInstanceActiveDirectoryAdministratorSpec   `json:"spec"`
	Status            MSSQLManagedInstanceActiveDirectoryAdministratorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MSSQLManagedInstanceActiveDirectoryAdministratorList contains a list of MSSQLManagedInstanceActiveDirectoryAdministrators
type MSSQLManagedInstanceActiveDirectoryAdministratorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MSSQLManagedInstanceActiveDirectoryAdministrator `json:"items"`
}

// Repository type metadata.
var (
	MSSQLManagedInstanceActiveDirectoryAdministrator_Kind             = "MSSQLManagedInstanceActiveDirectoryAdministrator"
	MSSQLManagedInstanceActiveDirectoryAdministrator_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MSSQLManagedInstanceActiveDirectoryAdministrator_Kind}.String()
	MSSQLManagedInstanceActiveDirectoryAdministrator_KindAPIVersion   = MSSQLManagedInstanceActiveDirectoryAdministrator_Kind + "." + CRDGroupVersion.String()
	MSSQLManagedInstanceActiveDirectoryAdministrator_GroupVersionKind = CRDGroupVersion.WithKind(MSSQLManagedInstanceActiveDirectoryAdministrator_Kind)
)

func init() {
	SchemeBuilder.Register(&MSSQLManagedInstanceActiveDirectoryAdministrator{}, &MSSQLManagedInstanceActiveDirectoryAdministratorList{})
}
