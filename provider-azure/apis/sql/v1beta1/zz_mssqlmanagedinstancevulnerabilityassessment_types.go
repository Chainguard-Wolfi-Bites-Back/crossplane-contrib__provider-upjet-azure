/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MSSQLManagedInstanceVulnerabilityAssessmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MSSQLManagedInstanceVulnerabilityAssessmentParameters struct {

	// +crossplane:generate:reference:type=MSSQLManagedInstance
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ManagedInstanceID *string `json:"managedInstanceId,omitempty" tf:"managed_instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedInstanceIDRef *v1.Reference `json:"managedInstanceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ManagedInstanceIDSelector *v1.Selector `json:"managedInstanceIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RecurringScans []RecurringScansParameters `json:"recurringScans,omitempty" tf:"recurring_scans,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKeySecretRef *v1.SecretKeySelector `json:"storageAccountAccessKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	StorageContainerPath *string `json:"storageContainerPath" tf:"storage_container_path,omitempty"`

	// +kubebuilder:validation:Optional
	StorageContainerSASKeySecretRef *v1.SecretKeySelector `json:"storageContainerSasKeySecretRef,omitempty" tf:"-"`
}

type RecurringScansObservation struct {
}

type RecurringScansParameters struct {

	// +kubebuilder:validation:Optional
	EmailSubscriptionAdmins *bool `json:"emailSubscriptionAdmins,omitempty" tf:"email_subscription_admins,omitempty"`

	// +kubebuilder:validation:Optional
	Emails []*string `json:"emails,omitempty" tf:"emails,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

// MSSQLManagedInstanceVulnerabilityAssessmentSpec defines the desired state of MSSQLManagedInstanceVulnerabilityAssessment
type MSSQLManagedInstanceVulnerabilityAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MSSQLManagedInstanceVulnerabilityAssessmentParameters `json:"forProvider"`
}

// MSSQLManagedInstanceVulnerabilityAssessmentStatus defines the observed state of MSSQLManagedInstanceVulnerabilityAssessment.
type MSSQLManagedInstanceVulnerabilityAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MSSQLManagedInstanceVulnerabilityAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MSSQLManagedInstanceVulnerabilityAssessment is the Schema for the MSSQLManagedInstanceVulnerabilityAssessments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MSSQLManagedInstanceVulnerabilityAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MSSQLManagedInstanceVulnerabilityAssessmentSpec   `json:"spec"`
	Status            MSSQLManagedInstanceVulnerabilityAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MSSQLManagedInstanceVulnerabilityAssessmentList contains a list of MSSQLManagedInstanceVulnerabilityAssessments
type MSSQLManagedInstanceVulnerabilityAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MSSQLManagedInstanceVulnerabilityAssessment `json:"items"`
}

// Repository type metadata.
var (
	MSSQLManagedInstanceVulnerabilityAssessment_Kind             = "MSSQLManagedInstanceVulnerabilityAssessment"
	MSSQLManagedInstanceVulnerabilityAssessment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MSSQLManagedInstanceVulnerabilityAssessment_Kind}.String()
	MSSQLManagedInstanceVulnerabilityAssessment_KindAPIVersion   = MSSQLManagedInstanceVulnerabilityAssessment_Kind + "." + CRDGroupVersion.String()
	MSSQLManagedInstanceVulnerabilityAssessment_GroupVersionKind = CRDGroupVersion.WithKind(MSSQLManagedInstanceVulnerabilityAssessment_Kind)
)

func init() {
	SchemeBuilder.Register(&MSSQLManagedInstanceVulnerabilityAssessment{}, &MSSQLManagedInstanceVulnerabilityAssessmentList{})
}
