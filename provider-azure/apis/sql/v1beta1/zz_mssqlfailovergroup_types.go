/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MSSQLFailoverGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PartnerServer []PartnerServerObservation `json:"partnerServer,omitempty" tf:"partner_server,omitempty"`
}

type MSSQLFailoverGroupParameters struct {

	// +crossplane:generate:reference:type=MSSQLDatabase
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	Databases []*string `json:"databases,omitempty" tf:"databases,omitempty"`

	// +kubebuilder:validation:Optional
	DatabasesRefs []v1.Reference `json:"databasesRefs,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DatabasesSelector *v1.Selector `json:"databasesSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	PartnerServer []PartnerServerParameters `json:"partnerServer" tf:"partner_server,omitempty"`

	// +kubebuilder:validation:Required
	ReadWriteEndpointFailoverPolicy []ReadWriteEndpointFailoverPolicyParameters `json:"readWriteEndpointFailoverPolicy" tf:"read_write_endpoint_failover_policy,omitempty"`

	// +kubebuilder:validation:Optional
	ReadonlyEndpointFailoverPolicyEnabled *bool `json:"readonlyEndpointFailoverPolicyEnabled,omitempty" tf:"readonly_endpoint_failover_policy_enabled,omitempty"`

	// +crossplane:generate:reference:type=MSSQLServer
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ServerID *string `json:"serverId,omitempty" tf:"server_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServerIDRef *v1.Reference `json:"serverIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServerIDSelector *v1.Selector `json:"serverIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PartnerServerObservation struct {
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type PartnerServerParameters struct {

	// +crossplane:generate:reference:type=MSSQLServer
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	IDRef *v1.Reference `json:"idRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IDSelector *v1.Selector `json:"idSelector,omitempty" tf:"-"`
}

type ReadWriteEndpointFailoverPolicyObservation struct {
}

type ReadWriteEndpointFailoverPolicyParameters struct {

	// +kubebuilder:validation:Optional
	GraceMinutes *float64 `json:"graceMinutes,omitempty" tf:"grace_minutes,omitempty"`

	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`
}

// MSSQLFailoverGroupSpec defines the desired state of MSSQLFailoverGroup
type MSSQLFailoverGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MSSQLFailoverGroupParameters `json:"forProvider"`
}

// MSSQLFailoverGroupStatus defines the observed state of MSSQLFailoverGroup.
type MSSQLFailoverGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MSSQLFailoverGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MSSQLFailoverGroup is the Schema for the MSSQLFailoverGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MSSQLFailoverGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MSSQLFailoverGroupSpec   `json:"spec"`
	Status            MSSQLFailoverGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MSSQLFailoverGroupList contains a list of MSSQLFailoverGroups
type MSSQLFailoverGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MSSQLFailoverGroup `json:"items"`
}

// Repository type metadata.
var (
	MSSQLFailoverGroup_Kind             = "MSSQLFailoverGroup"
	MSSQLFailoverGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MSSQLFailoverGroup_Kind}.String()
	MSSQLFailoverGroup_KindAPIVersion   = MSSQLFailoverGroup_Kind + "." + CRDGroupVersion.String()
	MSSQLFailoverGroup_GroupVersionKind = CRDGroupVersion.WithKind(MSSQLFailoverGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&MSSQLFailoverGroup{}, &MSSQLFailoverGroupList{})
}
