/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this MSSQLServerSecurityAlertPolicy
func (mg *MSSQLServerSecurityAlertPolicy) GetTerraformResourceType() string {
	return "azurerm_mssql_server_security_alert_policy"
}

// GetConnectionDetailsMapping for this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"storage_account_access_key": "spec.forProvider.storageAccountAccessKeySecretRef"}
}

// GetObservation of this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLServerSecurityAlertPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLServerSecurityAlertPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLServerSecurityAlertPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLServerSecurityAlertPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLServerVulnerabilityAssessment
func (mg *MSSQLServerVulnerabilityAssessment) GetTerraformResourceType() string {
	return "azurerm_mssql_server_vulnerability_assessment"
}

// GetConnectionDetailsMapping for this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"storage_account_access_key": "spec.forProvider.storageAccountAccessKeySecretRef", "storage_container_sas_key": "spec.forProvider.storageContainerSasKeySecretRef"}
}

// GetObservation of this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLServerVulnerabilityAssessment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLServerVulnerabilityAssessment) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLServerVulnerabilityAssessmentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLServerVulnerabilityAssessment) GetTerraformSchemaVersion() int {
	return 0
}
