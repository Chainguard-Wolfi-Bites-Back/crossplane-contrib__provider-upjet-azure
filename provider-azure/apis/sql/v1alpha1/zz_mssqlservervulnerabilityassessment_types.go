/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MSSQLServerVulnerabilityAssessmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MSSQLServerVulnerabilityAssessmentParameters struct {

	// +kubebuilder:validation:Optional
	RecurringScans []RecurringScansParameters `json:"recurringScans,omitempty" tf:"recurring_scans,omitempty"`

	// +kubebuilder:validation:Required
	ServerSecurityAlertPolicyID *string `json:"serverSecurityAlertPolicyId" tf:"server_security_alert_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKeySecretRef *v1.SecretKeySelector `json:"storageAccountAccessKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	StorageContainerPath *string `json:"storageContainerPath" tf:"storage_container_path,omitempty"`

	// +kubebuilder:validation:Optional
	StorageContainerSASKeySecretRef *v1.SecretKeySelector `json:"storageContainerSasKeySecretRef,omitempty" tf:"-"`
}

type RecurringScansObservation struct {
}

type RecurringScansParameters struct {

	// +kubebuilder:validation:Optional
	EmailSubscriptionAdmins *bool `json:"emailSubscriptionAdmins,omitempty" tf:"email_subscription_admins,omitempty"`

	// +kubebuilder:validation:Optional
	Emails []*string `json:"emails,omitempty" tf:"emails,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

// MSSQLServerVulnerabilityAssessmentSpec defines the desired state of MSSQLServerVulnerabilityAssessment
type MSSQLServerVulnerabilityAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MSSQLServerVulnerabilityAssessmentParameters `json:"forProvider"`
}

// MSSQLServerVulnerabilityAssessmentStatus defines the observed state of MSSQLServerVulnerabilityAssessment.
type MSSQLServerVulnerabilityAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MSSQLServerVulnerabilityAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MSSQLServerVulnerabilityAssessment is the Schema for the MSSQLServerVulnerabilityAssessments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type MSSQLServerVulnerabilityAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MSSQLServerVulnerabilityAssessmentSpec   `json:"spec"`
	Status            MSSQLServerVulnerabilityAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MSSQLServerVulnerabilityAssessmentList contains a list of MSSQLServerVulnerabilityAssessments
type MSSQLServerVulnerabilityAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MSSQLServerVulnerabilityAssessment `json:"items"`
}

// Repository type metadata.
var (
	MSSQLServerVulnerabilityAssessment_Kind             = "MSSQLServerVulnerabilityAssessment"
	MSSQLServerVulnerabilityAssessment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MSSQLServerVulnerabilityAssessment_Kind}.String()
	MSSQLServerVulnerabilityAssessment_KindAPIVersion   = MSSQLServerVulnerabilityAssessment_Kind + "." + CRDGroupVersion.String()
	MSSQLServerVulnerabilityAssessment_GroupVersionKind = CRDGroupVersion.WithKind(MSSQLServerVulnerabilityAssessment_Kind)
)

func init() {
	SchemeBuilder.Register(&MSSQLServerVulnerabilityAssessment{}, &MSSQLServerVulnerabilityAssessmentList{})
}
