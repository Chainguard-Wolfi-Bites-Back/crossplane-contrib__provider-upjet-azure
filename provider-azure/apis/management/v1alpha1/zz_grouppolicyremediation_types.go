/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupPolicyRemediationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupPolicyRemediationParameters struct {

	// +kubebuilder:validation:Optional
	LocationFilters []*string `json:"locationFilters,omitempty" tf:"location_filters,omitempty"`

	// +kubebuilder:validation:Required
	ManagementGroupID *string `json:"managementGroupId" tf:"management_group_id,omitempty"`

	// +kubebuilder:validation:Required
	PolicyAssignmentID *string `json:"policyAssignmentId" tf:"policy_assignment_id,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyDefinitionID *string `json:"policyDefinitionId,omitempty" tf:"policy_definition_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceDiscoveryMode *string `json:"resourceDiscoveryMode,omitempty" tf:"resource_discovery_mode,omitempty"`
}

// GroupPolicyRemediationSpec defines the desired state of GroupPolicyRemediation
type GroupPolicyRemediationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupPolicyRemediationParameters `json:"forProvider"`
}

// GroupPolicyRemediationStatus defines the observed state of GroupPolicyRemediation.
type GroupPolicyRemediationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupPolicyRemediationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupPolicyRemediation is the Schema for the GroupPolicyRemediations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type GroupPolicyRemediation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupPolicyRemediationSpec   `json:"spec"`
	Status            GroupPolicyRemediationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupPolicyRemediationList contains a list of GroupPolicyRemediations
type GroupPolicyRemediationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupPolicyRemediation `json:"items"`
}

// Repository type metadata.
var (
	GroupPolicyRemediation_Kind             = "GroupPolicyRemediation"
	GroupPolicyRemediation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupPolicyRemediation_Kind}.String()
	GroupPolicyRemediation_KindAPIVersion   = GroupPolicyRemediation_Kind + "." + CRDGroupVersion.String()
	GroupPolicyRemediation_GroupVersionKind = CRDGroupVersion.WithKind(GroupPolicyRemediation_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupPolicyRemediation{}, &GroupPolicyRemediationList{})
}
