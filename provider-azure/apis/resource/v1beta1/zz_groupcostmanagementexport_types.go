/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExportDataOptionsObservation struct {
}

type ExportDataOptionsParameters struct {

	// +kubebuilder:validation:Required
	TimeFrame *string `json:"timeFrame" tf:"time_frame,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ExportDataStorageLocationObservation struct {
}

type ExportDataStorageLocationParameters struct {

	// +kubebuilder:validation:Required
	ContainerID *string `json:"containerId" tf:"container_id,omitempty"`

	// +kubebuilder:validation:Required
	RootFolderPath *string `json:"rootFolderPath" tf:"root_folder_path,omitempty"`
}

type GroupCostManagementExportObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupCostManagementExportParameters struct {

	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// +kubebuilder:validation:Required
	ExportDataOptions []ExportDataOptionsParameters `json:"exportDataOptions" tf:"export_data_options,omitempty"`

	// +kubebuilder:validation:Required
	ExportDataStorageLocation []ExportDataStorageLocationParameters `json:"exportDataStorageLocation" tf:"export_data_storage_location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RecurrencePeriodEndDate *string `json:"recurrencePeriodEndDate" tf:"recurrence_period_end_date,omitempty"`

	// +kubebuilder:validation:Required
	RecurrencePeriodStartDate *string `json:"recurrencePeriodStartDate" tf:"recurrence_period_start_date,omitempty"`

	// +kubebuilder:validation:Required
	RecurrenceType *string `json:"recurrenceType" tf:"recurrence_type,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupIDRef *v1.Reference `json:"resourceGroupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupIDSelector *v1.Selector `json:"resourceGroupIdSelector,omitempty" tf:"-"`
}

// GroupCostManagementExportSpec defines the desired state of GroupCostManagementExport
type GroupCostManagementExportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupCostManagementExportParameters `json:"forProvider"`
}

// GroupCostManagementExportStatus defines the observed state of GroupCostManagementExport.
type GroupCostManagementExportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupCostManagementExportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupCostManagementExport is the Schema for the GroupCostManagementExports API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type GroupCostManagementExport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupCostManagementExportSpec   `json:"spec"`
	Status            GroupCostManagementExportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupCostManagementExportList contains a list of GroupCostManagementExports
type GroupCostManagementExportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupCostManagementExport `json:"items"`
}

// Repository type metadata.
var (
	GroupCostManagementExport_Kind             = "GroupCostManagementExport"
	GroupCostManagementExport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupCostManagementExport_Kind}.String()
	GroupCostManagementExport_KindAPIVersion   = GroupCostManagementExport_Kind + "." + CRDGroupVersion.String()
	GroupCostManagementExport_GroupVersionKind = CRDGroupVersion.WithKind(GroupCostManagementExport_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupCostManagementExport{}, &GroupCostManagementExportList{})
}
