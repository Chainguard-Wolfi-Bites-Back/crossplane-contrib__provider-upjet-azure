/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupPolicyExemptionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GroupPolicyExemptionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Required
	ExemptionCategory *string `json:"exemptionCategory" tf:"exemption_category,omitempty"`

	// +kubebuilder:validation:Optional
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PolicyAssignmentID *string `json:"policyAssignmentId" tf:"policy_assignment_id,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyDefinitionReferenceIds []*string `json:"policyDefinitionReferenceIds,omitempty" tf:"policy_definition_reference_ids,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupIDRef *v1.Reference `json:"resourceGroupIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupIDSelector *v1.Selector `json:"resourceGroupIdSelector,omitempty" tf:"-"`
}

// GroupPolicyExemptionSpec defines the desired state of GroupPolicyExemption
type GroupPolicyExemptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupPolicyExemptionParameters `json:"forProvider"`
}

// GroupPolicyExemptionStatus defines the observed state of GroupPolicyExemption.
type GroupPolicyExemptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupPolicyExemptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GroupPolicyExemption is the Schema for the GroupPolicyExemptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type GroupPolicyExemption struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GroupPolicyExemptionSpec   `json:"spec"`
	Status            GroupPolicyExemptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupPolicyExemptionList contains a list of GroupPolicyExemptions
type GroupPolicyExemptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupPolicyExemption `json:"items"`
}

// Repository type metadata.
var (
	GroupPolicyExemption_Kind             = "GroupPolicyExemption"
	GroupPolicyExemption_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupPolicyExemption_Kind}.String()
	GroupPolicyExemption_KindAPIVersion   = GroupPolicyExemption_Kind + "." + CRDGroupVersion.String()
	GroupPolicyExemption_GroupVersionKind = CRDGroupVersion.WithKind(GroupPolicyExemption_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupPolicyExemption{}, &GroupPolicyExemptionList{})
}
