/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this GroupCostManagementExport
func (mg *GroupCostManagementExport) GetTerraformResourceType() string {
	return "azurerm_resource_group_cost_management_export"
}

// GetConnectionDetailsMapping for this GroupCostManagementExport
func (tr *GroupCostManagementExport) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this GroupCostManagementExport
func (tr *GroupCostManagementExport) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this GroupCostManagementExport
func (tr *GroupCostManagementExport) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this GroupCostManagementExport
func (tr *GroupCostManagementExport) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this GroupCostManagementExport
func (tr *GroupCostManagementExport) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this GroupCostManagementExport
func (tr *GroupCostManagementExport) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this GroupCostManagementExport using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *GroupCostManagementExport) LateInitialize(attrs []byte) (bool, error) {
	params := &GroupCostManagementExportParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *GroupCostManagementExport) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this GroupPolicyExemption
func (mg *GroupPolicyExemption) GetTerraformResourceType() string {
	return "azurerm_resource_group_policy_exemption"
}

// GetConnectionDetailsMapping for this GroupPolicyExemption
func (tr *GroupPolicyExemption) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this GroupPolicyExemption
func (tr *GroupPolicyExemption) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this GroupPolicyExemption
func (tr *GroupPolicyExemption) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this GroupPolicyExemption
func (tr *GroupPolicyExemption) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this GroupPolicyExemption
func (tr *GroupPolicyExemption) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this GroupPolicyExemption
func (tr *GroupPolicyExemption) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this GroupPolicyExemption using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *GroupPolicyExemption) LateInitialize(attrs []byte) (bool, error) {
	params := &GroupPolicyExemptionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *GroupPolicyExemption) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this GroupPolicyRemediation
func (mg *GroupPolicyRemediation) GetTerraformResourceType() string {
	return "azurerm_resource_group_policy_remediation"
}

// GetConnectionDetailsMapping for this GroupPolicyRemediation
func (tr *GroupPolicyRemediation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this GroupPolicyRemediation
func (tr *GroupPolicyRemediation) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this GroupPolicyRemediation
func (tr *GroupPolicyRemediation) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this GroupPolicyRemediation
func (tr *GroupPolicyRemediation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this GroupPolicyRemediation
func (tr *GroupPolicyRemediation) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this GroupPolicyRemediation
func (tr *GroupPolicyRemediation) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this GroupPolicyRemediation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *GroupPolicyRemediation) LateInitialize(attrs []byte) (bool, error) {
	params := &GroupPolicyRemediationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *GroupPolicyRemediation) GetTerraformSchemaVersion() int {
	return 0
}
