/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APISchemaObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type APISchemaParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Required
	APIName *string `json:"apiName" tf:"api_name,omitempty"`

	// +kubebuilder:validation:Required
	ContentType *string `json:"contentType" tf:"content_type,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	SchemaID *string `json:"schemaId" tf:"schema_id,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// APISchemaSpec defines the desired state of APISchema
type APISchemaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     APISchemaParameters `json:"forProvider"`
}

// APISchemaStatus defines the observed state of APISchema.
type APISchemaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        APISchemaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// APISchema is the Schema for the APISchemas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type APISchema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              APISchemaSpec   `json:"spec"`
	Status            APISchemaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// APISchemaList contains a list of APISchemas
type APISchemaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []APISchema `json:"items"`
}

// Repository type metadata.
var (
	APISchema_Kind             = "APISchema"
	APISchema_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: APISchema_Kind}.String()
	APISchema_KindAPIVersion   = APISchema_Kind + "." + CRDGroupVersion.String()
	APISchema_GroupVersionKind = CRDGroupVersion.WithKind(APISchema_Kind)
)

func init() {
	SchemeBuilder.Register(&APISchema{}, &APISchemaList{})
}
