/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CostManagementExportObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CostManagementExportParameters struct {

	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// +kubebuilder:validation:Required
	ExportDataOptions []ExportDataOptionsParameters `json:"exportDataOptions" tf:"export_data_options,omitempty"`

	// +kubebuilder:validation:Required
	ExportDataStorageLocation []ExportDataStorageLocationParameters `json:"exportDataStorageLocation" tf:"export_data_storage_location,omitempty"`

	// +kubebuilder:validation:Required
	RecurrencePeriodEndDate *string `json:"recurrencePeriodEndDate" tf:"recurrence_period_end_date,omitempty"`

	// +kubebuilder:validation:Required
	RecurrencePeriodStartDate *string `json:"recurrencePeriodStartDate" tf:"recurrence_period_start_date,omitempty"`

	// +kubebuilder:validation:Required
	RecurrenceType *string `json:"recurrenceType" tf:"recurrence_type,omitempty"`

	// +kubebuilder:validation:Required
	SubscriptionID *string `json:"subscriptionId" tf:"subscription_id,omitempty"`
}

type ExportDataOptionsObservation struct {
}

type ExportDataOptionsParameters struct {

	// +kubebuilder:validation:Required
	TimeFrame *string `json:"timeFrame" tf:"time_frame,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type ExportDataStorageLocationObservation struct {
}

type ExportDataStorageLocationParameters struct {

	// +kubebuilder:validation:Required
	ContainerID *string `json:"containerId" tf:"container_id,omitempty"`

	// +kubebuilder:validation:Required
	RootFolderPath *string `json:"rootFolderPath" tf:"root_folder_path,omitempty"`
}

// CostManagementExportSpec defines the desired state of CostManagementExport
type CostManagementExportSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CostManagementExportParameters `json:"forProvider"`
}

// CostManagementExportStatus defines the observed state of CostManagementExport.
type CostManagementExportStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CostManagementExportObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CostManagementExport is the Schema for the CostManagementExports API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type CostManagementExport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CostManagementExportSpec   `json:"spec"`
	Status            CostManagementExportStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CostManagementExportList contains a list of CostManagementExports
type CostManagementExportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CostManagementExport `json:"items"`
}

// Repository type metadata.
var (
	CostManagementExport_Kind             = "CostManagementExport"
	CostManagementExport_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CostManagementExport_Kind}.String()
	CostManagementExport_KindAPIVersion   = CostManagementExport_Kind + "." + CRDGroupVersion.String()
	CostManagementExport_GroupVersionKind = CRDGroupVersion.WithKind(CostManagementExport_Kind)
)

func init() {
	SchemeBuilder.Register(&CostManagementExport{}, &CostManagementExportList{})
}
