/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyExemptionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicyExemptionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Required
	ExemptionCategory *string `json:"exemptionCategory" tf:"exemption_category,omitempty"`

	// +kubebuilder:validation:Optional
	ExpiresOn *string `json:"expiresOn,omitempty" tf:"expires_on,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	PolicyAssignmentID *string `json:"policyAssignmentId" tf:"policy_assignment_id,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyDefinitionReferenceIds []*string `json:"policyDefinitionReferenceIds,omitempty" tf:"policy_definition_reference_ids,omitempty"`

	// +kubebuilder:validation:Required
	SubscriptionID *string `json:"subscriptionId" tf:"subscription_id,omitempty"`
}

// PolicyExemptionSpec defines the desired state of PolicyExemption
type PolicyExemptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyExemptionParameters `json:"forProvider"`
}

// PolicyExemptionStatus defines the observed state of PolicyExemption.
type PolicyExemptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyExemptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyExemption is the Schema for the PolicyExemptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PolicyExemption struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyExemptionSpec   `json:"spec"`
	Status            PolicyExemptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyExemptionList contains a list of PolicyExemptions
type PolicyExemptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyExemption `json:"items"`
}

// Repository type metadata.
var (
	PolicyExemption_Kind             = "PolicyExemption"
	PolicyExemption_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyExemption_Kind}.String()
	PolicyExemption_KindAPIVersion   = PolicyExemption_Kind + "." + CRDGroupVersion.String()
	PolicyExemption_GroupVersionKind = CRDGroupVersion.WithKind(PolicyExemption_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyExemption{}, &PolicyExemptionList{})
}
