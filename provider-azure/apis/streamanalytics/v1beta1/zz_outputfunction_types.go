/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OutputFunctionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OutputFunctionParameters struct {

	// +kubebuilder:validation:Required
	APIKeySecretRef v1.SecretKeySelector `json:"apiKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	BatchMaxCount *float64 `json:"batchMaxCount,omitempty" tf:"batch_max_count,omitempty"`

	// +kubebuilder:validation:Optional
	BatchMaxInBytes *float64 `json:"batchMaxInBytes,omitempty" tf:"batch_max_in_bytes,omitempty"`

	// +kubebuilder:validation:Required
	FunctionApp *string `json:"functionApp" tf:"function_app,omitempty"`

	// +kubebuilder:validation:Required
	FunctionName *string `json:"functionName" tf:"function_name,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/streamanalytics/v1beta1.Job
	// +kubebuilder:validation:Optional
	StreamAnalyticsJobName *string `json:"streamAnalyticsJobName,omitempty" tf:"stream_analytics_job_name,omitempty"`

	// +kubebuilder:validation:Optional
	StreamAnalyticsJobNameRef *v1.Reference `json:"streamAnalyticsJobNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StreamAnalyticsJobNameSelector *v1.Selector `json:"streamAnalyticsJobNameSelector,omitempty" tf:"-"`
}

// OutputFunctionSpec defines the desired state of OutputFunction
type OutputFunctionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OutputFunctionParameters `json:"forProvider"`
}

// OutputFunctionStatus defines the observed state of OutputFunction.
type OutputFunctionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OutputFunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OutputFunction is the Schema for the OutputFunctions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type OutputFunction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OutputFunctionSpec   `json:"spec"`
	Status            OutputFunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OutputFunctionList contains a list of OutputFunctions
type OutputFunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OutputFunction `json:"items"`
}

// Repository type metadata.
var (
	OutputFunction_Kind             = "OutputFunction"
	OutputFunction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OutputFunction_Kind}.String()
	OutputFunction_KindAPIVersion   = OutputFunction_Kind + "." + CRDGroupVersion.String()
	OutputFunction_GroupVersionKind = CRDGroupVersion.WithKind(OutputFunction_Kind)
)

func init() {
	SchemeBuilder.Register(&OutputFunction{}, &OutputFunctionList{})
}
