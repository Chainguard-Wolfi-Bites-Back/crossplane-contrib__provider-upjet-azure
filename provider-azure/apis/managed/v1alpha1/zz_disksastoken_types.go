/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiskSASTokenObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DiskSASTokenParameters struct {

	// +kubebuilder:validation:Required
	AccessLevel *string `json:"accessLevel" tf:"access_level,omitempty"`

	// +kubebuilder:validation:Required
	DurationInSeconds *float64 `json:"durationInSeconds" tf:"duration_in_seconds,omitempty"`

	// +kubebuilder:validation:Required
	ManagedDiskID *string `json:"managedDiskId" tf:"managed_disk_id,omitempty"`
}

// DiskSASTokenSpec defines the desired state of DiskSASToken
type DiskSASTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiskSASTokenParameters `json:"forProvider"`
}

// DiskSASTokenStatus defines the observed state of DiskSASToken.
type DiskSASTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiskSASTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DiskSASToken is the Schema for the DiskSASTokens API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DiskSASToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DiskSASTokenSpec   `json:"spec"`
	Status            DiskSASTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiskSASTokenList contains a list of DiskSASTokens
type DiskSASTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiskSASToken `json:"items"`
}

// Repository type metadata.
var (
	DiskSASToken_Kind             = "DiskSASToken"
	DiskSASToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiskSASToken_Kind}.String()
	DiskSASToken_KindAPIVersion   = DiskSASToken_Kind + "." + CRDGroupVersion.String()
	DiskSASToken_GroupVersionKind = CRDGroupVersion.WithKind(DiskSASToken_Kind)
)

func init() {
	SchemeBuilder.Register(&DiskSASToken{}, &DiskSASTokenList{})
}
