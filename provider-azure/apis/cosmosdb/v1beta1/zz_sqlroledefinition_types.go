/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionsObservation struct {
}

type PermissionsParameters struct {

	// +kubebuilder:validation:Required
	DataActions []*string `json:"dataActions" tf:"data_actions,omitempty"`
}

type SQLRoleDefinitionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SQLRoleDefinitionParameters struct {

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/cosmosdb/v1beta1.Account
	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Optional
	AccountNameRef *v1.Reference `json:"accountNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AccountNameSelector *v1.Selector `json:"accountNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	AssignableScopes []*string `json:"assignableScopes" tf:"assignable_scopes,omitempty"`

	// +kubebuilder:validation:Required
	Permissions []PermissionsParameters `json:"permissions" tf:"permissions,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty" tf:"role_definition_id,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// SQLRoleDefinitionSpec defines the desired state of SQLRoleDefinition
type SQLRoleDefinitionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SQLRoleDefinitionParameters `json:"forProvider"`
}

// SQLRoleDefinitionStatus defines the observed state of SQLRoleDefinition.
type SQLRoleDefinitionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLRoleDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SQLRoleDefinition is the Schema for the SQLRoleDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SQLRoleDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SQLRoleDefinitionSpec   `json:"spec"`
	Status            SQLRoleDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLRoleDefinitionList contains a list of SQLRoleDefinitions
type SQLRoleDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLRoleDefinition `json:"items"`
}

// Repository type metadata.
var (
	SQLRoleDefinition_Kind             = "SQLRoleDefinition"
	SQLRoleDefinition_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLRoleDefinition_Kind}.String()
	SQLRoleDefinition_KindAPIVersion   = SQLRoleDefinition_Kind + "." + CRDGroupVersion.String()
	SQLRoleDefinition_GroupVersionKind = CRDGroupVersion.WithKind(SQLRoleDefinition_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLRoleDefinition{}, &SQLRoleDefinitionList{})
}
