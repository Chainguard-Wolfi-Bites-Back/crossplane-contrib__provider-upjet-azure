/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SQLTriggerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SQLTriggerParameters struct {

	// +kubebuilder:validation:Required
	Body *string `json:"body" tf:"body,omitempty"`

	// +crossplane:generate:reference:type=SQLContainer
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ContainerID *string `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// +kubebuilder:validation:Optional
	ContainerIDRef *v1.Reference `json:"containerIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ContainerIDSelector *v1.Selector `json:"containerIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Operation *string `json:"operation" tf:"operation,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// SQLTriggerSpec defines the desired state of SQLTrigger
type SQLTriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SQLTriggerParameters `json:"forProvider"`
}

// SQLTriggerStatus defines the observed state of SQLTrigger.
type SQLTriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SQLTriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SQLTrigger is the Schema for the SQLTriggers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type SQLTrigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SQLTriggerSpec   `json:"spec"`
	Status            SQLTriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SQLTriggerList contains a list of SQLTriggers
type SQLTriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SQLTrigger `json:"items"`
}

// Repository type metadata.
var (
	SQLTrigger_Kind             = "SQLTrigger"
	SQLTrigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SQLTrigger_Kind}.String()
	SQLTrigger_KindAPIVersion   = SQLTrigger_Kind + "." + CRDGroupVersion.String()
	SQLTrigger_GroupVersionKind = CRDGroupVersion.WithKind(SQLTrigger_Kind)
)

func init() {
	SchemeBuilder.Register(&SQLTrigger{}, &SQLTriggerList{})
}
