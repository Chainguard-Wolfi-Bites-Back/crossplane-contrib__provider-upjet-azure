/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IOTHubDPSObservation struct {
	DeviceProvisioningHostName *string `json:"deviceProvisioningHostName,omitempty" tf:"device_provisioning_host_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IDScope *string `json:"idScope,omitempty" tf:"id_scope,omitempty"`

	LinkedHub []LinkedHubObservation `json:"linkedHub,omitempty" tf:"linked_hub,omitempty"`

	ServiceOperationsHostName *string `json:"serviceOperationsHostName,omitempty" tf:"service_operations_host_name,omitempty"`
}

type IOTHubDPSParameters struct {

	// +kubebuilder:validation:Optional
	AllocationPolicy *string `json:"allocationPolicy,omitempty" tf:"allocation_policy,omitempty"`

	// +kubebuilder:validation:Optional
	IPFilterRule []IPFilterRuleParameters `json:"ipFilterRule,omitempty" tf:"ip_filter_rule,omitempty"`

	// +kubebuilder:validation:Optional
	LinkedHub []LinkedHubParameters `json:"linkedHub,omitempty" tf:"linked_hub,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	PublicNetworkAccessEnabled *bool `json:"publicNetworkAccessEnabled,omitempty" tf:"public_network_access_enabled,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Sku []IOTHubDPSSkuParameters `json:"sku" tf:"sku,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IOTHubDPSSkuObservation struct {
}

type IOTHubDPSSkuParameters struct {

	// +kubebuilder:validation:Required
	Capacity *float64 `json:"capacity" tf:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type IPFilterRuleObservation struct {
}

type IPFilterRuleParameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Required
	IPMask *string `json:"ipMask" tf:"ip_mask,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`
}

type LinkedHubObservation struct {
	HostName *string `json:"hostname,omitempty" tf:"hostname,omitempty"`
}

type LinkedHubParameters struct {

	// +kubebuilder:validation:Optional
	AllocationWeight *float64 `json:"allocationWeight,omitempty" tf:"allocation_weight,omitempty"`

	// +kubebuilder:validation:Optional
	ApplyAllocationPolicy *bool `json:"applyAllocationPolicy,omitempty" tf:"apply_allocation_policy,omitempty"`

	// +kubebuilder:validation:Required
	ConnectionStringSecretRef v1.SecretKeySelector `json:"connectionStringSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`
}

// IOTHubDPSSpec defines the desired state of IOTHubDPS
type IOTHubDPSSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IOTHubDPSParameters `json:"forProvider"`
}

// IOTHubDPSStatus defines the observed state of IOTHubDPS.
type IOTHubDPSStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IOTHubDPSObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IOTHubDPS is the Schema for the IOTHubDPSs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type IOTHubDPS struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IOTHubDPSSpec   `json:"spec"`
	Status            IOTHubDPSStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IOTHubDPSList contains a list of IOTHubDPSs
type IOTHubDPSList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IOTHubDPS `json:"items"`
}

// Repository type metadata.
var (
	IOTHubDPS_Kind             = "IOTHubDPS"
	IOTHubDPS_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IOTHubDPS_Kind}.String()
	IOTHubDPS_KindAPIVersion   = IOTHubDPS_Kind + "." + CRDGroupVersion.String()
	IOTHubDPS_GroupVersionKind = CRDGroupVersion.WithKind(IOTHubDPS_Kind)
)

func init() {
	SchemeBuilder.Register(&IOTHubDPS{}, &IOTHubDPSList{})
}
