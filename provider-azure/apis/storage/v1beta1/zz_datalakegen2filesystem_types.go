/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AceObservation struct {
}

type AceParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Required
	Permissions *string `json:"permissions" tf:"permissions,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type DataLakeGen2FileSystemObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataLakeGen2FileSystemParameters struct {

	// +kubebuilder:validation:Optional
	Ace []AceParameters `json:"ace,omitempty" tf:"ace,omitempty"`

	// +kubebuilder:validation:Optional
	Group *string `json:"group,omitempty" tf:"group,omitempty"`

	// +kubebuilder:validation:Optional
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// +kubebuilder:validation:Optional
	Properties map[string]*string `json:"properties,omitempty" tf:"properties,omitempty"`

	// +crossplane:generate:reference:type=Account
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountIDRef *v1.Reference `json:"storageAccountIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	StorageAccountIDSelector *v1.Selector `json:"storageAccountIdSelector,omitempty" tf:"-"`
}

// DataLakeGen2FileSystemSpec defines the desired state of DataLakeGen2FileSystem
type DataLakeGen2FileSystemSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataLakeGen2FileSystemParameters `json:"forProvider"`
}

// DataLakeGen2FileSystemStatus defines the observed state of DataLakeGen2FileSystem.
type DataLakeGen2FileSystemStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataLakeGen2FileSystemObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeGen2FileSystem is the Schema for the DataLakeGen2FileSystems API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type DataLakeGen2FileSystem struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataLakeGen2FileSystemSpec   `json:"spec"`
	Status            DataLakeGen2FileSystemStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataLakeGen2FileSystemList contains a list of DataLakeGen2FileSystems
type DataLakeGen2FileSystemList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataLakeGen2FileSystem `json:"items"`
}

// Repository type metadata.
var (
	DataLakeGen2FileSystem_Kind             = "DataLakeGen2FileSystem"
	DataLakeGen2FileSystem_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataLakeGen2FileSystem_Kind}.String()
	DataLakeGen2FileSystem_KindAPIVersion   = DataLakeGen2FileSystem_Kind + "." + CRDGroupVersion.String()
	DataLakeGen2FileSystem_GroupVersionKind = CRDGroupVersion.WithKind(DataLakeGen2FileSystem_Kind)
)

func init() {
	SchemeBuilder.Register(&DataLakeGen2FileSystem{}, &DataLakeGen2FileSystemList{})
}
