/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountNetworkRulesObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccountNetworkRulesParameters struct {

	// +kubebuilder:validation:Optional
	Bypass []*string `json:"bypass,omitempty" tf:"bypass,omitempty"`

	// +kubebuilder:validation:Required
	DefaultAction *string `json:"defaultAction" tf:"default_action,omitempty"`

	// +kubebuilder:validation:Optional
	IPRules []*string `json:"ipRules,omitempty" tf:"ip_rules,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateLinkAccess []AccountNetworkRulesPrivateLinkAccessParameters `json:"privateLinkAccess,omitempty" tf:"private_link_access,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNetworkSubnetIds []*string `json:"virtualNetworkSubnetIds,omitempty" tf:"virtual_network_subnet_ids,omitempty"`
}

type AccountNetworkRulesPrivateLinkAccessObservation struct {
}

type AccountNetworkRulesPrivateLinkAccessParameters struct {

	// +kubebuilder:validation:Required
	EndpointResourceID *string `json:"endpointResourceId" tf:"endpoint_resource_id,omitempty"`

	// +kubebuilder:validation:Optional
	EndpointTenantID *string `json:"endpointTenantId,omitempty" tf:"endpoint_tenant_id,omitempty"`
}

// AccountNetworkRulesSpec defines the desired state of AccountNetworkRules
type AccountNetworkRulesSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountNetworkRulesParameters `json:"forProvider"`
}

// AccountNetworkRulesStatus defines the observed state of AccountNetworkRules.
type AccountNetworkRulesStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountNetworkRulesObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccountNetworkRules is the Schema for the AccountNetworkRuless API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type AccountNetworkRules struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountNetworkRulesSpec   `json:"spec"`
	Status            AccountNetworkRulesStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountNetworkRulesList contains a list of AccountNetworkRuless
type AccountNetworkRulesList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountNetworkRules `json:"items"`
}

// Repository type metadata.
var (
	AccountNetworkRules_Kind             = "AccountNetworkRules"
	AccountNetworkRules_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountNetworkRules_Kind}.String()
	AccountNetworkRules_KindAPIVersion   = AccountNetworkRules_Kind + "." + CRDGroupVersion.String()
	AccountNetworkRules_GroupVersionKind = CRDGroupVersion.WithKind(AccountNetworkRules_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountNetworkRules{}, &AccountNetworkRulesList{})
}
