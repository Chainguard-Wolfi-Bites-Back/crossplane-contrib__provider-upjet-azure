/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LiveEventOutputObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LiveEventOutputParameters struct {

	// +kubebuilder:validation:Required
	ArchiveWindowDuration *string `json:"archiveWindowDuration" tf:"archive_window_duration,omitempty"`

	// +crossplane:generate:reference:type=Asset
	// +kubebuilder:validation:Optional
	AssetName *string `json:"assetName,omitempty" tf:"asset_name,omitempty"`

	// +kubebuilder:validation:Optional
	AssetNameRef *v1.Reference `json:"assetNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AssetNameSelector *v1.Selector `json:"assetNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	HlsFragmentsPerTSSegment *float64 `json:"hlsFragmentsPerTsSegment,omitempty" tf:"hls_fragments_per_ts_segment,omitempty"`

	// +crossplane:generate:reference:type=LiveEvent
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-azure/apis/rconfig.ExtractResourceID()
	// +kubebuilder:validation:Optional
	LiveEventID *string `json:"liveEventId,omitempty" tf:"live_event_id,omitempty"`

	// +kubebuilder:validation:Optional
	LiveEventIDRef *v1.Reference `json:"liveEventIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	LiveEventIDSelector *v1.Selector `json:"liveEventIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ManifestName *string `json:"manifestName,omitempty" tf:"manifest_name,omitempty"`

	// +kubebuilder:validation:Optional
	OutputSnapTimeInSeconds *float64 `json:"outputSnapTimeInSeconds,omitempty" tf:"output_snap_time_in_seconds,omitempty"`
}

// LiveEventOutputSpec defines the desired state of LiveEventOutput
type LiveEventOutputSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LiveEventOutputParameters `json:"forProvider"`
}

// LiveEventOutputStatus defines the observed state of LiveEventOutput.
type LiveEventOutputStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LiveEventOutputObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LiveEventOutput is the Schema for the LiveEventOutputs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type LiveEventOutput struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LiveEventOutputSpec   `json:"spec"`
	Status            LiveEventOutputStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LiveEventOutputList contains a list of LiveEventOutputs
type LiveEventOutputList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LiveEventOutput `json:"items"`
}

// Repository type metadata.
var (
	LiveEventOutput_Kind             = "LiveEventOutput"
	LiveEventOutput_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LiveEventOutput_Kind}.String()
	LiveEventOutput_KindAPIVersion   = LiveEventOutput_Kind + "." + CRDGroupVersion.String()
	LiveEventOutput_GroupVersionKind = CRDGroupVersion.WithKind(LiveEventOutput_Kind)
)

func init() {
	SchemeBuilder.Register(&LiveEventOutput{}, &LiveEventOutputList{})
}
