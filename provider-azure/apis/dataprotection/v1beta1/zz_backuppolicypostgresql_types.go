/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupPolicyPostgreSQLObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BackupPolicyPostgreSQLParameters struct {

	// +kubebuilder:validation:Required
	BackupRepeatingTimeIntervals []*string `json:"backupRepeatingTimeIntervals" tf:"backup_repeating_time_intervals,omitempty"`

	// +kubebuilder:validation:Required
	DefaultRetentionDuration *string `json:"defaultRetentionDuration" tf:"default_retention_duration,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RetentionRule []BackupPolicyPostgreSQLRetentionRuleParameters `json:"retentionRule,omitempty" tf:"retention_rule,omitempty"`

	// +crossplane:generate:reference:type=BackupVault
	// +kubebuilder:validation:Optional
	VaultName *string `json:"vaultName,omitempty" tf:"vault_name,omitempty"`

	// +kubebuilder:validation:Optional
	VaultNameRef *v1.Reference `json:"vaultNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VaultNameSelector *v1.Selector `json:"vaultNameSelector,omitempty" tf:"-"`
}

type BackupPolicyPostgreSQLRetentionRuleObservation struct {
}

type BackupPolicyPostgreSQLRetentionRuleParameters struct {

	// +kubebuilder:validation:Required
	Criteria []RetentionRuleCriteriaParameters `json:"criteria" tf:"criteria,omitempty"`

	// +kubebuilder:validation:Required
	Duration *string `json:"duration" tf:"duration,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Priority *float64 `json:"priority" tf:"priority,omitempty"`
}

type RetentionRuleCriteriaObservation struct {
}

type RetentionRuleCriteriaParameters struct {

	// +kubebuilder:validation:Optional
	AbsoluteCriteria *string `json:"absoluteCriteria,omitempty" tf:"absolute_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	DaysOfWeek []*string `json:"daysOfWeek,omitempty" tf:"days_of_week,omitempty"`

	// +kubebuilder:validation:Optional
	MonthsOfYear []*string `json:"monthsOfYear,omitempty" tf:"months_of_year,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledBackupTimes []*string `json:"scheduledBackupTimes,omitempty" tf:"scheduled_backup_times,omitempty"`

	// +kubebuilder:validation:Optional
	WeeksOfMonth []*string `json:"weeksOfMonth,omitempty" tf:"weeks_of_month,omitempty"`
}

// BackupPolicyPostgreSQLSpec defines the desired state of BackupPolicyPostgreSQL
type BackupPolicyPostgreSQLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupPolicyPostgreSQLParameters `json:"forProvider"`
}

// BackupPolicyPostgreSQLStatus defines the observed state of BackupPolicyPostgreSQL.
type BackupPolicyPostgreSQLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupPolicyPostgreSQLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyPostgreSQL is the Schema for the BackupPolicyPostgreSQLs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type BackupPolicyPostgreSQL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupPolicyPostgreSQLSpec   `json:"spec"`
	Status            BackupPolicyPostgreSQLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyPostgreSQLList contains a list of BackupPolicyPostgreSQLs
type BackupPolicyPostgreSQLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupPolicyPostgreSQL `json:"items"`
}

// Repository type metadata.
var (
	BackupPolicyPostgreSQL_Kind             = "BackupPolicyPostgreSQL"
	BackupPolicyPostgreSQL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupPolicyPostgreSQL_Kind}.String()
	BackupPolicyPostgreSQL_KindAPIVersion   = BackupPolicyPostgreSQL_Kind + "." + CRDGroupVersion.String()
	BackupPolicyPostgreSQL_GroupVersionKind = CRDGroupVersion.WithKind(BackupPolicyPostgreSQL_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupPolicyPostgreSQL{}, &BackupPolicyPostgreSQLList{})
}
