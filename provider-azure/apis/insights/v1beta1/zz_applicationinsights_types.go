/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationInsightsObservation struct {
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ApplicationInsightsParameters struct {

	// +kubebuilder:validation:Required
	ApplicationType *string `json:"applicationType" tf:"application_type,omitempty"`

	// +kubebuilder:validation:Optional
	DailyDataCapInGb *float64 `json:"dailyDataCapInGb,omitempty" tf:"daily_data_cap_in_gb,omitempty"`

	// +kubebuilder:validation:Optional
	DailyDataCapNotificationsDisabled *bool `json:"dailyDataCapNotificationsDisabled,omitempty" tf:"daily_data_cap_notifications_disabled,omitempty"`

	// +kubebuilder:validation:Optional
	DisableIPMasking *bool `json:"disableIpMasking,omitempty" tf:"disable_ip_masking,omitempty"`

	// +kubebuilder:validation:Optional
	ForceCustomerStorageForProfiler *bool `json:"forceCustomerStorageForProfiler,omitempty" tf:"force_customer_storage_for_profiler,omitempty"`

	// +kubebuilder:validation:Optional
	InternetIngestionEnabled *bool `json:"internetIngestionEnabled,omitempty" tf:"internet_ingestion_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	InternetQueryEnabled *bool `json:"internetQueryEnabled,omitempty" tf:"internet_query_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	LocalAuthenticationDisabled *bool `json:"localAuthenticationDisabled,omitempty" tf:"local_authentication_disabled,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RetentionInDays *float64 `json:"retentionInDays,omitempty" tf:"retention_in_days,omitempty"`

	// +kubebuilder:validation:Optional
	SamplingPercentage *float64 `json:"samplingPercentage,omitempty" tf:"sampling_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-azure/apis/operationalinsights/v1beta1.Workspace
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`

	// +kubebuilder:validation:Optional
	WorkspaceIDRef *v1.Reference `json:"workspaceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	WorkspaceIDSelector *v1.Selector `json:"workspaceIdSelector,omitempty" tf:"-"`
}

// ApplicationInsightsSpec defines the desired state of ApplicationInsights
type ApplicationInsightsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationInsightsParameters `json:"forProvider"`
}

// ApplicationInsightsStatus defines the observed state of ApplicationInsights.
type ApplicationInsightsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationInsightsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationInsights is the Schema for the ApplicationInsightss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type ApplicationInsights struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ApplicationInsightsSpec   `json:"spec"`
	Status            ApplicationInsightsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationInsightsList contains a list of ApplicationInsightss
type ApplicationInsightsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationInsights `json:"items"`
}

// Repository type metadata.
var (
	ApplicationInsights_Kind             = "ApplicationInsights"
	ApplicationInsights_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationInsights_Kind}.String()
	ApplicationInsights_KindAPIVersion   = ApplicationInsights_Kind + "." + CRDGroupVersion.String()
	ApplicationInsights_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationInsights_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationInsights{}, &ApplicationInsightsList{})
}
